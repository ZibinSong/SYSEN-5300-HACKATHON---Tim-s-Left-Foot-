# SigmaView — Minimal Working Dashboard (Clean + Launchable)
# ----------------------------------------------------------
# If your current app opens a blank page, start from this clean MWE.
# 1) Restart R session. 2) Install packages once:
# install.packages(c("shiny","shinydashboard","plotly","DT","dplyr","tidyr","stringr","lubridate","readr"), dependencies = TRUE)
# 3) Save this as app.R and run: shiny::runApp()

# ---------------- Packages ----------------
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(readr)

# ---------------- Paths (your 4 files) ----------------
UCSF_PATIENT_CSV   <- "/cloud/project/Dataset_Locked_UCSF - Patient Intake.csv"
UCSF_EMP_CSV       <- "/cloud/project/Dataset_Locked_UCSF - Employee Information.csv"
MED_PATIENT_CSV    <- "/cloud/project/Dataset_MediumSized_Locked - Patient Intake.csv"
MED_EMP_CSV        <- "/cloud/project/Dataset_MediumSized_Locked - Employee Information.csv"

# ---------------- Load + Normalize ----------------
load_data <- function(){
  u_patient <- suppressWarnings(read_csv(UCSF_PATIENT_CSV, show_col_types = FALSE))
  u_emp     <- suppressWarnings(read_csv(UCSF_EMP_CSV,     show_col_types = FALSE))
  m_patient <- suppressWarnings(read_csv(MED_PATIENT_CSV,  show_col_types = FALSE))
  m_emp     <- suppressWarnings(read_csv(MED_EMP_CSV,      show_col_types = FALSE))

  clean_names <- function(df){
    names(df) <- names(df) |>
      tolower() |>
      gsub("[^a-z0-9]+","_", x=_) |>
      gsub("(^_|_$)", "", x=_, perl=TRUE)
    df
  }
  u_patient <- clean_names(u_patient); u_emp <- clean_names(u_emp)
  m_patient <- clean_names(m_patient); m_emp <- clean_names(m_emp)

  find_col <- function(df, candidates){
    hits <- intersect(candidates, names(df)); if(length(hits)) hits[1] else NULL
  }

  # Map patient files to normalized schema (with 3-shift + severity 1-5)
  normalize_patient <- function(pat, emp, label){
    emp_id_col <- find_col(emp, c("employee_id","employeeid","id","caregiver_id"))
    gender_col <- find_col(emp, c("gender","caregiver_gender","sex"))
    wing_col_e <- find_col(emp, c("wing","department","unit"))

    emp_min <- emp |>
      mutate(across(all_of(emp_id_col), as.character)) |>
      transmute(
        employee_id = .data[[emp_id_col]],
        caregiver_gender = if(!is.null(gender_col)) str_to_title(as.character(.data[[gender_col]])) else NA_character_,
        wing_emp = if(!is.null(wing_col_e)) as.character(.data[[wing_col_e]]) else NA_character_
      ) |>
      distinct()

    date_col  <- find_col(pat, c("date","visit_date","service_date"))
    tin_col   <- find_col(pat, c("time_in","start_time","checkin_time","arrival_time"))
    sev_col   <- find_col(pat, c("severity","sev","acuity","severity_score"))
    wing_col  <- find_col(pat, c("wing","unit","department"))
    eid_col   <- find_col(pat, c("employee_id","employeeid","caregiver_id","nurse_id"))
    dev_col   <- find_col(pat, c("deviation","lateness","delay_min","delta_min"))

    pat2 <- pat
    pat2$date <- if(!is.null(date_col)) as.Date(pat2[[date_shift if(!is.null(tin_col)) as.Date(pat2[[tin_col]]) else as.Date(NA)

    # derive 3-shift from time if present: morning [06:00-14:00), day [14:00-22:00), night [22:00-06:00)
    if(!is.null(tin_col))shift <- hour(suppressWarnings(parse_date_time(pat2[[tin_col]], orders = c("ymd HMS","ymd HM","ymd H","HMS","HM","H"), quiet=TRUE)))
      pat2$shift <- case_when(
        hrs >= 6  & hrs < 14 ~ "morning",
   shift 14 & hrs < 22 ~ "day",
        hrs >= 22 | hrs < 6  ~ "night",
        TRUE                 ~ NA_character_
      )
    } else pat2$shift <- NA_character_

    if(!is.null(eid_col)){
      pat2$employee_id <- as.character(pat2[[eid_col]])
      pat2 <- left_join(pat2, emp_min, by = "employee_id")
    } else {
      pat2$caregiver_gender <- NA_character_
      pat2$wing_emp <- NA_character_
    }

    pat2$wing <- if(!is.null(wing_col)) as.character(pat2[[wing_col]]) else pat2$wing_emp

    # severity as numeric 1-5 if possible
    if(!is.null(sev_col)){
      sraw <- pat2[[sev_col]]
      snum <- suppressWarnings(as.integer(sraw))
      if(all(is.na(snum))){
        # try to map text levels like Low..Critical → 1..5
        map <- c("low"=1, "medium"=3, "high"=4, "critical"=5)
        snum <- unname(map[tolower(as.character(sraw))]);
      }
      pat2$severity <- pmin(pmax(snum,1),5)
    } else pat2$severity <- NA_integershiftis.null(dev_col)){
      pat2shift<- suppressWarnings(as.numeric(pat2[[dev_col]]))
    } else {
      t_act <- find_col(pat2, c("t_actual","actual_time_min","service_time_min"))
      t_tgt <- find_col(pat2, c("t_target","target_time_min","expected_time_min"))
      pat2$deviation <- if(!is.null(t_act) && !is.null(t_tgt)) as.numeric(pat2[[t_act]]) - as.numeric(pat2[[t_tgt]]) else NA_real_
    }

    tibble(
      source = label,
      date = pat2$date,
      shift = tolower(as.character(pat2$shift)),
      wing = as.character(pat2$wing),
      severity = as.integer(pat2$severity),
      caregiver_gender = str_to_title(as.character(pat2$caregiver_gender)),
      deviation = suppressWarnings(as.numeric(pat2$deviation))
    )
  }

  visits <- bind_rows(
shiftze_patient(u_patient, u_emp, "UCSF"),
    normalize_patient(m_patient, m_emp, "MedSize")
  ) |>
    filter(!is.na(date))

  # simple derived exceptions: 3σ rule, per source
  exceptions <- visits |>
    group_by(source) |>
    mutate(mu = mean(deviation, na.rm=TRUE), sd = sd(deviation, na.rm=TRUE)) |>
    ungroup() |>
    filter(!is.na(deviation)) |>
    filter(deviation > mu + 3*sd | deviation < mu - 3*sd) |>
    transmute(
      date, shift, wing, severity, caregiver_gender,
      Source = source,
      Timestamp = as.POSIXct(date) + hours(sample(8:18, n(), TRUE)),
      Severity = ifelse(abs(deviation - mu) > 2*sd, "High", "Medium"),
      Description = paste0("Out-of-control deviation: ", round(deviation,2), " min"),
      Status = sample(c("Open","In Progress","Resolved"), n(), TRUE, prob=c(.5,.35,.15)),
      Assigned_To = sample(c("John Smith","Sarah Johnson","Mike Davis","Alex Chen"), n(), TRUE)
    )

  list(visits=visits, exceptions=exceptions)
}

.DATA <- load_data()s(sample(8:18, n(), TRUE)),
      Severity = ifelse(abs(deviation - mu) > 2*sd, "High", "Medium"),
      Description = paste0("Out-of-control deviation: ", round(deviation,2), " min"),
      Status = sample(c("Open","In Progress","Resolved"), n(), TRUE, prob=c(.5,.35,.15)),
      Assigned_To = sample(c("John Smith","Sarah Johnson","Mike Davis","Alex Chen"), n(), TRUE)
    )

  list(visits=visits, exceptions=exceptions)
}

.DATA <- load_data()

# ---------------- Helpers ----------------
weco_rule1 <- function(x){ m <- mean(x, na.rm=TRUE); # Big data file picker (choose the one file to analyze)
    selectInput("file_choice", "Data file", choices = c("UCSF Patient Intake" = "UCSF", "Med Patient Intake" = "MedSize"), selected = "UCSF"),
    selectInput("primary_filter", "Analyze By", choices = c(in = "black",
  dashboardHeader(title = "SigmaViewshiftth = 220),
  dashboardSidebar(
    width = 320,
    sidebarMenu(id = "mainmenu",
      menuItemshift", tabName = "dash", icon = icon("gauge-high"), selected = TRUE),
      menuItem("Data", tabName = "data", icon = icon("table"))
    ),
    tags$hr(),
    # Big data file picker (pick the one file we analyze)
    selectInput("file_choice", "Data file", choices = c("UCSF Patient Intake" = "UCSF", "Med Patient Intake" = "MedSize"), selected = "UCSF"),
    selectInput("primary_filter", "Analyze By", choices = c(
      "Shift" = "shift",
      "Severity (1-5)" = "severity"
    ), selected = "shift"),
    uiOutput("secondary_filter_ui"),
    dateRangeInput("daterange", "Date range", start = Sys.Date()-29, end = Sys.Date())
  ),
  dashboardBody(
    tags$head(tags$style(HTML('body, .content-wrapper { background-color:#2c3e50 !important; } .box {background:#34495e!important; border:1px solid #4a5f7a;} .box-header {background:#2c3e50!important; border-bottom:1px solid #4a5f7a;} .box-title, .nav-tabs>li>a, .sidebar a, .control-label, .info-box-text, .info-box-number {color:#ecf0f1!important;} .table {color:#ecf0f1;}'))),
    tabItems(
      tabItem(tabName = "dash",
        fluidRow(
          box(title = "Interval Deviation Control Chart", width = 8, solidHeader = TRUE, status = "primary",
   output$secondary_filter_ui <- renderUI({
    pf <- req(input$primary_filter)
    choices <- switch(pf,
      shift    = c("Morning"="morning","Day"="day","Night"="night"),
      severity = setNames(as.character(1:5), paste("Severity", 1:5))
    )
    selectInput("secondary_value", "Select Specific Group", choices = choices, selected = choices[[1]])
  })  box(title = "Exceptions (deriveshift= 4, solidHeader = TRUE, status = "primary",
              DTOutput("exception_table"))
        )
      ),
      tabItem(tabName = "data",
        box(title = "Filtered Visits", width = 12, solidHeader = TRUE, status = "primary",
            DTOutput("visits_table"))
      )
    )
  )
)

# ---------------- Server ----------------
server <- function(input, output, session){
  output$secondary_filter_ui <- renderUI({
    pf <- req(input$primary_filter)
    choices <- switch(pf,
      shift    = c("Morning"="morning","Day"="day","Night"="night"),
      severity = setNames(as.character(1:5), paste("Severity", 1:5))
    )
    selectInputfiltered_visits <- reactive({
    req(input$primary_filter, input$secondary_value, input$daterange, input$file_choice)
    df <- .DATA$visits |> filter(source == input$file_choice)
    out <- df |> filter(date >= as.Date(input$daterange[1]), date <= as.Date(input$daterange[2]))
    out <- out |> filter(.data[[input$primary_filter]] ==
                         (if(input$primary_filter=="severity") as.integer(input$secondary_value) else input$secondary_value))
    validate(need(nrow(out) > 0, "No rows match the current filters. Try another group or widen the date range."))
    out
  })hoices <- switch(pf,
      time_of_day = c("Morning"="morning","Afternoon"="afternoon","Evening"="evening","Night"="night"),
      wing        = c("SW"="SW","MW"="MW","MATW"="MATW","RW"="RW"),
      severity    = c("Low","Medium","High","Critical"),
      caregiver_gender = c("Male","Female","Other")
    )
    selectInput("sfiltered_exceptions <- reactive({
    ex <- .DATA$exceptions |> filter(Source == input$file_choice)
    ex <- ex |> filter(date >= as.Date(input$daterange[1]), date <= as.Date(input$daterange[2]))
    if(input$primary_filter=="severity"){
      ex <- ex |> filter(severity == as.integer(input$secondary_value))
    } else {
      ex <- ex |> filter(shift == input$secondary_value)
    }
    ex
  }) filter_by_inputs <- function(df, pf, sv, dr){
    if(is.null(df) || !nrow(df)) return(df)
    out <- df |>
      filter(date >= as.Date(dr[1]), date <= as.Date(dr[2]))
    if(!is.null(sv) && nzchar(sv)) out <- out |> filter(.data[[pf]] == sv)
    out
  }

  filtered_visits <- reactive({
    req(input$primary_filter, input$secondary_value, input$daterange, input$file_choice)
    df <- .DATA$visits |> filter(source == input$file_choice)
    out <- df |> filter(date >= as.Date(input$daterange[1]), date <= as.Date(input$daterange[2]))
    out <- out |> filter(.data[[input$primary_filter]] ==
                         (if(input$primary_filter=="severity") as.integer(input$secondary_value) else input$secondary_value))
    validate(need(nrow(out) > 0, "No rows match the current filters. Try another group or widen the date range."))
    out
  })
    df <- .DATA$visits
    if (input$dataset != "Both") df <- df |> filter(source == input$dataset)
    res <- filter_by_inputs(df, input$primary_filter, input$secondary_value, input$daterange)
    validate(need(nrow(res) > 0, "No rows match the current filters. Try another group or widen the date range."))
    res
  })

  filtered_exceptions <- reactive({
    ex <- .DATA$exceptions |> filter(Source == input$file_choice)
    ex <- ex |> filter(date >= as.Date(input$daterange[1]), date <= as.Date(input$daterange[2]))
    if(input$primary_f ex <- ex |> filter(Source == input$dataset)
    filter_by_inputs(ex, input$primary_filter, input$secondary_value, input$daterange)
  })

  output$control_chart <- renderPlotly({
    dat <- filtered_visits() |> arrange(date)
    mu <- mean(dat$deviation, na.rm=TRUE)
    sdv <- sd(dat$deviation, na.rm=TRUE)
    ucl <- mu + 3*sdv; lcl <- mu - 3*sdv
    idx <- weco_rule1(dat$deviation)

    p <- plot_ly(dat, x=~date, y=~deviation, type='scatter', mode='lines+markers', name='Deviation') |>
      add_trace(y=~I(rep(ucl,nrow(dat))), name='UCL', mode='lines', line=list(dash='dash')) |>
  p(lcl,nrow(dat))), name='LCL', mode='lines', line=list(dash='dash')) |>
      add_trace(y=~I(rep(mu, nrow(dat))), name='Mean', mode='lines', line=list(dash='dot'))
    if(length(idx)>0) p <- p |> add_markers(x=dat$date[idx], y=dat$deviation[idx], name='OOC', marker=list(size=10))
    p |> layout(xaxis=list(title='Date', color='white', gridcolor='#4a5f7a'),
                yaxis=list(title='Deviation (min)', color='white', gridcolor='#4a5f7a'),
                plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', font=list(color='white'))
  })

  output$exception_table <- renderDT({
    datatable(filtered_exceptions(), options=list(pageLength=8, dom='tip'), rownames=FALSE)
  })

  output$visits_table <- renderDT({
    datatable(filtered_visits(), options=list(pageLength=10, dom='tip'), rownames=FALSE)
  })
}

shinyApp(ui, server)
